ar.per
eps.x[i]
sum(ar.per * x[(i-1):(i-p)])
i
i <- 3
sum(ar.per * x[(i-1):(i-p)]) + eps.x[i]
sum(ar.per * x[(i-1):(i-p)])  + eps.y[i]
x[(1+p) : (popn + p)]
(1+p)
(popn + p)
ar.process <- function(ar.per, popn, mu = 0, sd = 1){
p <- length(ar.per)
eps.x <- rnorm((popn + p), mean = mu, sd = sd)
eps.y <- rnorm((popn + p), mean = mu, sd = sd)
x <- c()
y <- c()
for(i in (1+p):(popn+p)){
x[i] <-  sum(ar.per * x[(i-1):(i-p)]) + eps.x[i]
y[i] <-  sum(ar.per * x[(i-1):(i-p)])  + eps.y[i]
}
x <- x[(1+p) : (popn + p)]
y <- y[(1+p) : (popn + p)]
return(list("x" = x, "y" = y, "ar.par" = ar.per,
"mu" = mu, "sd" = sd))
}
ar.process(ar.per, popn)
p <- length(ar.per)
eps.x <- rnorm((popn + p), mean = mu, sd = sd)
eps.y <- rnorm((popn + p), mean = mu, sd = sd)
x <- c()
y <- c()
for(i in (1+p):(popn+p)){
x[i] <-  sum(ar.per * x[(i-1):(i-p)]) + eps.x[i]
y[i] <-  sum(ar.per * x[(i-1):(i-p)])  + eps.y[i]
}
x
p <- length(ar.per)
eps.x <- rnorm((popn + p), mean = mu, sd = sd)
eps.y <- rnorm((popn + p), mean = mu, sd = sd)
x <- rnorm(popn+p, 0, 1)
y <- rnorm(popn+p, 0, 1)
for(i in (1+p):(popn+p)){
x[i] <-  sum(ar.per * x[(i-1):(i-p)]) + eps.x[i]
y[i] <-  sum(ar.per * x[(i-1):(i-p)])  + eps.y[i]
}
x <- x[(1+p) : (popn + p)]
y <- y[(1+p) : (popn + p)]
x
y
popn <- 1000
n.sim <- 500
ar.per <- c(0.7, 0.3)
p <- length(ar.per)
ar.process <- function(ar.per, popn, mu = 0, sd = 1){
p <- length(ar.per)
eps.x <- rnorm((popn + p), mean = mu, sd = sd)
eps.y <- rnorm((popn + p), mean = mu, sd = sd)
x <- rnorm(popn+p, 0, 1)
y <- rnorm(popn+p, 0, 1)
for(i in (1+p):(popn+p)){
x[i] <-  sum(ar.per * x[(i-1):(i-p)]) + eps.x[i]
y[i] <-  sum(ar.per * x[(i-1):(i-p)])  + eps.y[i]
}
x <- x[(1+p) : (popn + p)]
y <- y[(1+p) : (popn + p)]
return(list("x" = x, "y" = y, "ar.par" = ar.per,
"mu" = mu, "sd" = sd))
}
x.ts <- matrix(0, nrow = n.sim, ncol = popn) # per row is one replication
y.ts <- matrix(0, nrow = n.sim, ncol = popn)
for(i in 1: n.sim){
per.process <- ar.process(ar.per, popn)
x.ts[i,] <- per.process$x
y.ts[i,] <- per.process$y
}
popn <- 1000
n.sim <- 500
ar.per <- c(0.7, 0.3)
p <- length(ar.per)
ar.process <- function(ar.per, popn, mu = 0, sd = 1){
p <- length(ar.per)
eps.x <- rnorm((popn + p), mean = mu, sd = sd)
eps.y <- rnorm((popn + p), mean = mu, sd = sd)
x <- rnorm(popn+p, 0, 1)
y <- rnorm(popn+p, 0, 1)
for(i in (1+p):(popn+p)){
x[i] <-  sum(ar.per * x[(i-1):(i-p)]) + eps.x[i]
y[i] <-  sum(ar.per * x[(i-1):(i-p)])  + eps.y[i]
}
x <- x[(1+p) : (popn + p)]
y <- y[(1+p) : (popn + p)]
return(list("x" = x, "y" = y, "ar.par" = ar.per,
"mu" = mu, "sd" = sd))
}
x.ts <- matrix(0, nrow = n.sim, ncol = popn) # per row is one replication
y.ts <- matrix(0, nrow = n.sim, ncol = popn)
for(i in 1: n.sim){
per.process <- ar.process(ar.per, popn)
x.ts[i,] <- per.process$x
y.ts[i,] <- per.process$y
}
cor.coef <- c()
dis.coer <- c()
dis.p <- c()
lm.p <- c()
lm.beta <- c()
z.beta <- c()
for(i in 1:n.sim){
cor.coef[i] <- cor(x.ts[i,], y.ts[i,])
dis.coer[i] <- dcor(x.ts[i,], y.ts[i,])
dd <- dcorT.test(x.ts[i,], y.ts[i,])
dis.p[i] <-dd$p.value
lt <- lm(y.ts[i,] ~ x.ts[i,])
ls <- summary(lt)
lm.beta[i] <- ls$coefficients[2,"Estimate"]
lm.p[i] <- ls$coefficients[2,4] ## p value for linear regression test, p value.
z.beta[i] <- lm.beta[i]/ (ls$coefficients[2,"Std. Error"] * sd(x.ts[i,]))
}
hist(cor.coef, main = "Correlation coefficients for AR(2)",
xlab = "Correlation coefficient", col = "lightblue",prob=T)
hist(dis.coer, main = "Distance correlations for AR(2)",
xlab = "Distance correlation", col = "lightblue", prob=T)
hist(z.beta, main = expression(bold(paste("Standardized ", beta, " coefficients for AR(2)"))),
xlab = expression(paste("Standardized ", beta, " coefficients")) ,
col = "lightblue",prob=T)
data.frame( "linear test" = mean(lm.p < 0.05),
"dis test" = mean(dis.p < 0.05)) %>%
kbl( booktabs=T, escape=T, align = "c",digits = 3,
caption = "Rejection rates for linear and distance correlation test") %>%
kable_styling(full_width =F, latex_options = c("HOLD_position")) %>%
kable_material(c("striped"))
data.frame( "linear test" = mean(lm.p < 0.05),
"dis test" = mean(dis.p < 0.05)) %>%
kbl( booktabs=T, escape=T, align = "c",digits = 3,
caption = "Rejection rates for linear and distance correlation test") %>%
kable_styling(full_width =F, latex_options = c("HOLD_position")) %>%
kable_material(c("striped"))
hist(cor.coef, main = "Correlation coefficients for AR(2)",
xlab = "Correlation coefficient", col = "lightblue",prob=T)
hist(dis.coer, main = "Distance correlations for AR(2)",
xlab = "Distance correlation", col = "lightblue", prob=T)
hist(z.beta, main = expression(bold(paste("Standardized ", beta, " coefficients for AR(2)"))),
xlab = expression(paste("Standardized ", beta, " coefficients")) ,
col = "lightblue",prob=T)
save.image("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/third.sim.RData")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE,eval = TRUE,cache=TRUE,warning = FALSE,message = FALSE)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(fig.height = 4)
knitr::opts_chunk$set(fig.width = 6)
knitr::opts_chunk$set(fig.align="center")
set.seed(98001)
popn <- 1000
n.sim <- 500
ar.per <- c(0.3, 0.3)
p <- length(ar.per)
ar.process <- function(ar.per, popn, mu = 0, sd = 1){
p <- length(ar.per)
eps.x <- rnorm((popn + p), mean = mu, sd = sd)
eps.y <- rnorm((popn + p), mean = mu, sd = sd)
x <- rnorm(popn+p, 0, 1)
y <- rnorm(popn+p, 0, 1)
for(i in (1+p):(popn+p)){
x[i] <-  sum(ar.per * x[(i-1):(i-p)]) + eps.x[i]
y[i] <-  sum(ar.per * x[(i-1):(i-p)])  + eps.y[i]
}
x <- x[(1+p) : (popn + p)]
y <- y[(1+p) : (popn + p)]
return(list("x" = x, "y" = y, "ar.par" = ar.per,
"mu" = mu, "sd" = sd))
}
x.ts <- matrix(0, nrow = n.sim, ncol = popn) # per row is one replication
y.ts <- matrix(0, nrow = n.sim, ncol = popn)
for(i in 1: n.sim){
per.process <- ar.process(ar.per, popn)
x.ts[i,] <- per.process$x
y.ts[i,] <- per.process$y
}
cor.coef <- c()
dis.core <- c()
dis.p <- c()
lm.p <- c()
lm.beta <- c()
z.beta <- c()
x.ts
for(i in 1:n.sim){
cor.coef[i] <- cor(x.ts[i,], y.ts[i,])
dis.core[i] <- dcor(x.ts[i,], y.ts[i,])
dd <- dcorT.test(x.ts[i,], y.ts[i,])
dis.p[i] <-dd$p.value
lt <- lm(y.ts[i,] ~ x.ts[i,])
ls <- summary(lt)
lm.beta[i] <- ls$coefficients[2,"Estimate"]
lm.p[i] <- ls$coefficients[2,4] ## p value for linear regression test, p value.
z.beta[i] <- lm.beta[i]/ (ls$coefficients[2,"Std. Error"] * sd(x.ts[i,]))
}
library(tidyr) #Allows for us to manipulate the data structure
library(data.table) #Allows for us to manipulate the data structure
library(ggplot2) #this makes better looking plots in R
library(dplyr)
library(haven)
library(astsa)
library(TTR)
library(forecast)
library(broom.mixed)
library(cowplot)
library(knitr)
library(TSA)
library(energy)
library(plotrix)
library(kableExtra)
theme_set(theme_minimal())
for(i in 1:n.sim){
cor.coef[i] <- cor(x.ts[i,], y.ts[i,])
dis.core[i] <- dcor(x.ts[i,], y.ts[i,])
dd <- dcorT.test(x.ts[i,], y.ts[i,])
dis.p[i] <-dd$p.value
lt <- lm(y.ts[i,] ~ x.ts[i,])
ls <- summary(lt)
lm.beta[i] <- ls$coefficients[2,"Estimate"]
lm.p[i] <- ls$coefficients[2,4] ## p value for linear regression test, p value.
z.beta[i] <- lm.beta[i]/ (ls$coefficients[2,"Std. Error"] * sd(x.ts[i,]))
}
save.image("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/fifth.sim.RData")
set.seed(980012)
popn <- 1000
n.sim <- 500
ar.per <- c(-0.3, -0.3)
p <- length(ar.per)
ar.process <- function(ar.per, popn, mu = 0, sd = 1){
p <- length(ar.per)
eps.x <- rnorm((popn + p), mean = mu, sd = sd)
eps.y <- rnorm((popn + p), mean = mu, sd = sd)
x <- rnorm(popn+p, 0, 1)
y <- rnorm(popn+p, 0, 1)
for(i in (1+p):(popn+p)){
x[i] <-  sum(ar.per * x[(i-1):(i-p)]) + eps.x[i]
y[i] <-  sum(ar.per * x[(i-1):(i-p)])  + eps.y[i]
}
x <- x[(1+p) : (popn + p)]
y <- y[(1+p) : (popn + p)]
return(list("x" = x, "y" = y, "ar.par" = ar.per,
"mu" = mu, "sd" = sd))
}
x.ts <- matrix(0, nrow = n.sim, ncol = popn) # per row is one replication
y.ts <- matrix(0, nrow = n.sim, ncol = popn)
for(i in 1: n.sim){
per.process <- ar.process(ar.per, popn)
x.ts[i,] <- per.process$x
y.ts[i,] <- per.process$y
}
cor.coef <- c()
dis.core <- c()
dis.p <- c()
lm.p <- c()
lm.beta <- c()
z.beta <- c()
for(i in 1:n.sim){
cor.coef[i] <- cor(x.ts[i,], y.ts[i,])
dis.core[i] <- dcor(x.ts[i,], y.ts[i,])
dd <- dcorT.test(x.ts[i,], y.ts[i,])
dis.p[i] <-dd$p.value
lt <- lm(y.ts[i,] ~ x.ts[i,])
ls <- summary(lt)
lm.beta[i] <- ls$coefficients[2,"Estimate"]
lm.p[i] <- ls$coefficients[2,4] ## p value for linear regression test, p value.
z.beta[i] <- lm.beta[i]/ (ls$coefficients[2,"Std. Error"] * sd(x.ts[i,]))
}
save.image("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/six.sim(-0.3,-0.3).RData")
hist(cor.coef, main = "Correlation coefficients for AR(2)",
xlab = "Correlation coefficient", col = "lightblue",prob=T)
hist(dis.core, main = "Distance correlations for AR(2)",
xlab = "Distance correlation", col = "lightblue", prob=T)
hist(z.beta, main = expression(bold(paste("Standardized ", beta, " coefficients for AR(2)"))),
xlab = expression(paste("Standardized ", beta, " coefficients")) ,
col = "lightblue",prob=T)
load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/fifth.sim.RData")
hist(cor.coef, main = "Correlation coefficients for AR(2)",
xlab = "Correlation coefficient", col = "lightblue",prob=T)
hist(dis.core, main = "Distance correlations for AR(2)",
xlab = "Distance correlation", col = "lightblue", prob=T)
hist(z.beta, main = expression(bold(paste("Standardized ", beta, " coefficients for AR(2)"))),
xlab = expression(paste("Standardized ", beta, " coefficients")) ,
col = "lightblue",prob=T)
data.frame( "linear test" = mean(lm.p < 0.05),
"dis test" = mean(dis.p < 0.05)) %>%
kbl( booktabs=T, escape=T, align = "c",digits = 3,
caption = "Rejection rates for linear and distance correlation test") %>%
kable_styling(full_width =F, latex_options = c("HOLD_position")) %>%
kable_material(c("striped"))
data.frame( "linear test" = mean(lm.p < 0.05),
"dis test" = mean(dis.p < 0.05)) %>%
kbl( booktabs=T, escape=T, align = "c",digits = 3,
caption = "Rejection rates for linear and distance correlation test") %>%
kable_styling(full_width =F, latex_options = c("HOLD_position")) %>%
kable_material(c("striped"))
set.seed(980012)
popn <- 1000
n.sim <- 500
ar.par <- c(-0.3, 0.3)
p <- length(ar.par)
ar.process <- function(ar.par, popn, mu = 0, sd = 1){
p <- length(ar.par)
eps.x <- rnorm((popn + p), mean = mu, sd = sd)
eps.y <- rnorm((popn + p), mean = mu, sd = sd)
x <- rnorm(popn+p, 0, 1)
y <- rnorm(popn+p, 0, 1)
for(i in (1+p):(popn+p)){
x[i] <-  sum(ar.par * x[(i-1):(i-p)]) + eps.x[i]
y[i] <-  sum(ar.par * x[(i-1):(i-p)])  + eps.y[i]
}
x <- x[(1+p) : (popn + p)]
y <- y[(1+p) : (popn + p)]
return(list("x" = x, "y" = y, "ar.par" = ar.par,
"mu" = mu, "sd" = sd))
}
x.ts <- matrix(0, nrow = n.sim, ncol = popn) # per row is one replication
y.ts <- matrix(0, nrow = n.sim, ncol = popn)
for(i in 1: n.sim){
per.process <- ar.process(ar.par, popn)
x.ts[i,] <- per.process$x
y.ts[i,] <- per.process$y
}
cor.coef <- c()
dis.core <- c()
dis.p <- c()
lm.p <- c()
lm.beta <- c()
z.beta <- c()
for(i in 1:n.sim){
cor.coef[i] <- cor(x.ts[i,], y.ts[i,])
dis.core[i] <- dcor(x.ts[i,], y.ts[i,])
dd <- dcorT.test(x.ts[i,], y.ts[i,])
dis.p[i] <-dd$p.value
lt <- lm(y.ts[i,] ~ x.ts[i,])
ls <- summary(lt)
lm.beta[i] <- ls$coefficients[2,"Estimate"]
lm.p[i] <- ls$coefficients[2,4] ## p value for linear regression test, p value.
z.beta[i] <- lm.beta[i]/ (ls$coefficients[2,"Std. Error"] * sd(x.ts[i,]))
}
hist(cor.coef, main = "Correlation coefficients for AR(2)",
xlab = "Correlation coefficient", col = "lightblue",prob=T)
hist(dis.core, main = "Distance correlations for AR(2)",
xlab = "Distance correlation", col = "lightblue", prob=T)
cor(y.ts[i,], x.ts[i,])
cor.coef
dis.core
hist(z.beta, main = expression(bold(paste("Standardized ", beta, " coefficients for AR(2)"))),
xlab = expression(paste("Standardized ", beta, " coefficients")) ,
col = "lightblue",prob=T)
lm(x.ts[i,] ~ y.ts[i,])
ccf(y.ts[1,], x.ts[1,])
ts.plot(y.ts)
ts.plot(y.ts[1,])
ts.plot(x.ts[1,])
ccf(y.ts[1,], x.ts[1,])
ccf(y.ts[1,], x.ts[2,])
ccf(y.ts[2,], x.ts[1,])
ccf(y.ts[2,], x.ts[2,])
ccf(y.ts[4,], x.ts[4,])
set.seed(923)
popn <- 1000
n.sim <- 500
ar.par <- c(0.5, 0.5)
p <- length(ar.par)
ar.process <- function(ar.par, popn, mu = 0, sd = 1){
p <- length(ar.par)
eps.x <- rnorm((popn + p), mean = mu, sd = sd)
eps.y <- rnorm((popn + p), mean = mu, sd = sd)
x <- rnorm(popn+p, 0, 1)
y <- rnorm(popn+p, 0, 1)
for(i in (1+p):(popn+p)){
x[i] <-  sum(ar.par * x[(i-1):(i-p)]) + eps.x[i]
y[i] <-  sum(ar.par * x[(i-1):(i-p)])  + eps.y[i]
}
x <- x[(1+p) : (popn + p)]
y <- y[(1+p) : (popn + p)]
return(list("x" = x, "y" = y, "ar.par" = ar.par,
"mu" = mu, "sd" = sd))
}
x.ts <- matrix(0, nrow = n.sim, ncol = popn) # per row is one replication
y.ts <- matrix(0, nrow = n.sim, ncol = popn)
for(i in 1: n.sim){
per.process <- ar.process(ar.par, popn)
x.ts[i,] <- per.process$x
y.ts[i,] <- per.process$y
}
cor.coef <- c()
dis.core <- c()
dis.p <- c()
lm.p <- c()
lm.beta <- c()
z.beta <- c()
for(i in 1:n.sim){
cor.coef[i] <- cor(x.ts[i,], y.ts[i,])
dis.core[i] <- dcor(x.ts[i,], y.ts[i,])
dd <- dcorT.test(x.ts[i,], y.ts[i,])
dis.p[i] <-dd$p.value
lt <- lm(y.ts[i,] ~ x.ts[i,])
ls <- summary(lt)
lm.beta[i] <- ls$coefficients[2,"Estimate"]
lm.p[i] <- ls$coefficients[2,4] ## p value for linear regression test, p value.
z.beta[i] <- lm.beta[i]/ (ls$coefficients[2,"Std. Error"] * sd(x.ts[i,]))
}
hist(cor.coef, main = "Correlation coefficients for AR(2)",
xlab = "Correlation coefficient", col = "lightblue",prob=T)
hist(dis.core, main = "Distance correlations for AR(2)",
xlab = "Distance correlation", col = "lightblue", prob=T)
hist(cor.coef, main = "Correlation coefficients for AR(2)",
xlab = "Correlation coefficient", col = "lightblue",prob=T)
hist(cor.coef, main = "Correlation coefficients for AR(2)",
xlab = "Correlation coefficient", col = "lightblue",prob=T, xlim = c(-1,1))
hist(cor.coef, main = "Correlation coefficients for AR(2)",
xlab = "Correlation coefficient", col = "lightblue",prob=T, xlim = c(0,1))
hist(z.beta, main = expression(bold(paste("Standardized ", beta, " coefficients for AR(2)"))),
xlab = expression(paste("Standardized ", beta, " coefficients")) ,
col = "lightblue",prob=T)
rm(list = ls())
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/first.sim.RData")
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/second.sim.RData")
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/third.sim.RData")
load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/fifth.sim.RData")
set.seed(923)
popn <- 1000
n.sim <- 500
ar.par <- c(0.5, 0.5)
p <- length(ar.par)
ar.process <- function(ar.par, popn, mu = 0, sd = 1){
p <- length(ar.par)
eps.x <- rnorm((popn + p), mean = mu, sd = sd)
eps.y <- rnorm((popn + p), mean = mu, sd = sd)
x <- rnorm(popn+p, 0, 1)
y <- rnorm(popn+p, 0, 1)
for(i in (1+p):(popn+p)){
x[i] <-  sum(ar.par * x[(i-1):(i-p)]) + eps.x[i]
y[i] <-  sum(ar.par * x[(i-1):(i-p)])  + eps.y[i]
}
x <- x[(1+p) : (popn + p)]
y <- y[(1+p) : (popn + p)]
return(list("x" = x, "y" = y, "ar.par" = ar.par,
"mu" = mu, "sd" = sd))
}
x.ts <- matrix(0, nrow = n.sim, ncol = popn) # per row is one replication
y.ts <- matrix(0, nrow = n.sim, ncol = popn)
for(i in 1: n.sim){
per.process <- ar.process(ar.par, popn)
x.ts[i,] <- per.process$x
y.ts[i,] <- per.process$y
}
cor.coef <- c()
dis.core <- c()
dis.p <- c()
lm.p <- c()
lm.beta <- c()
z.beta <- c()
for(i in 1:n.sim){
cor.coef[i] <- cor(x.ts[i,], y.ts[i,])
dis.core[i] <- dcor(x.ts[i,], y.ts[i,])
dd <- dcorT.test(x.ts[i,], y.ts[i,])
dis.p[i] <-dd$p.value
lt <- lm(y.ts[i,] ~ x.ts[i,])
ls <- summary(lt)
lm.beta[i] <- ls$coefficients[2,"Estimate"]
lm.p[i] <- ls$coefficients[2,4] ## p value for linear regression test, p value.
z.beta[i] <- lm.beta[i]/ (ls$coefficients[2,"Std. Error"] * sd(x.ts[i,]))
}
save.image("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/seventh.sim(0.5,0.5).RData")
knitr::opts_chunk$set(echo = FALSE,eval = TRUE,cache=TRUE,warning = FALSE,message = FALSE)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(fig.height = 4)
knitr::opts_chunk$set(fig.width = 6)
knitr::opts_chunk$set(fig.align="center")
load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/first.sim.RData")
hist(cor.coef, main = "Correlation coefficients for MA(2)",
xlab = "Correlation coefficient", col = "lightblue",prob=T)
hist(dis.core, main = "Distance correlations for MA(2)",
xlab = "Distance correlation", col = "lightblue", prob=T)
load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/first.sim.RData")
dis.core <- dis.coer
rm(dis.coer)
save.image("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/first.sim.RData")
rm(list = ls())
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/first.sim.RData")
load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/second.sim.RData")
dis.core <- dis.coer
rm(dis.coer)
save.image("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/second.sim.RData")
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/first.sim.RData")
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/second.sim.RData")
load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/third.sim.RData")
rm(list = ls())
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/first.sim.RData")
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/second.sim.RData")
load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/third.sim.RData")
dis.core <- dis.coer
rm(dis.coer)
save.image("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/third.sim.RData")
rm(list = ls())
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/first.sim.RData")
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/second.sim.RData")
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/third.sim.RData")
load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/forth.sim.RData")
rm(list = ls())
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/first.sim.RData")
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/second.sim.RData")
#load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/third.sim.RData")
load("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/forth.sim.RData")
dis.core <- dis.coer
rm(dis.coer)
save.image("~/Dropbox (Brown)/2023 Spring RAship/Spring23_RA/ts present/data/forth.sim.RData")
